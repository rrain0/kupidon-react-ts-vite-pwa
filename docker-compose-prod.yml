

name: kupidon-prod-react


services:

  react:
    # You must build image before with API_BASE_URL
    # docker build -t rrain0/kupidon-react-react:1.3.6 --build-arg API_BASE_URL=https://kupidon.rrain.fvds.ru:40010/api .
    # docker push rrain0/kupidon-react-react:1.3.6
    image: rrain0/kupidon-react-react:1.3.6
    ports:
      - '${PROXY_PORT}:${PROXY_PORT}'
    volumes:
      - ./nginx-react/nginx.conf:/etc/nginx/templates/nginx.conf.template:ro
    environment:
      # where to find 'templates/nginx.conf.template'
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
      - REACT_PORT
    restart: unless-stopped


  nginx:
    image: nginx:1.25.5-alpine
    network_mode: 'service:react'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/templates/nginx.conf.template:ro
      - ${CERT_FILE}:/etc/ssl/cert/cert.crt:ro
      - ${CERT_KEY}:/etc/ssl/cert/cert.key:ro
    environment:
      # where to find 'templates/nginx.conf.template'
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
      - REACT_PORT
      - PROXY_HOST
      - PROXY_PORT
      - CERT_FILE
      - CERT_KEY
      - KTOR_HOST
      - KTOR_PORT
    restart: unless-stopped



# nginx auto env substitution:
# https://stackoverflow.com/a/75183393/14168271
#
# nginx Docker image can extract environment variables before it starts, but it's a bit tricky.
# One solution is to:
#
# 1) Add env variables to your nginx.conf file.
# 2) Copy it to /etc/nginx/templates/nginx.conf.template in the container (as opposed to your normal /etc/nginx) in the build step or as a volume.
# 3)Set the NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx environment variable in docker-compose.yml.
#
# This will cause the nginx.conf.template file to be copied to /etc/nginx as nginx.conf
# and the environment variables will be replaced with their values.
#
# There is one caveat to keep in mind: using command property in docker-compose.yml seems to be disabling
# the extraction functionality.

